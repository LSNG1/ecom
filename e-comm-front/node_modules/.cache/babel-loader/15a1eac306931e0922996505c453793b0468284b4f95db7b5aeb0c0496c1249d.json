{"ast":null,"code":"var _jsxFileName = \"/home/mike/Wac/e-commerce/e-comm-front/src/ArticlePage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Product } from './pages/shop/product';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArticlePage = ({\n  match\n}) => {\n  _s();\n  const {\n    id\n  } = useParams(); // Assuming you use the 'id' parameter from the URL to identify the article\n\n  // Fetch the article content based on the 'id' from your data source or API\n  // You can store this in a state or retrieve it on the fly depending on your setup\n\n  // For demonstration purposes, let's assume the article content is stored in a variable called 'articleContent'\n  const articleContent = `Article Content for article with ID: ${id}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [Product.id, id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: articleContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(ArticlePage, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c = ArticlePage;\nexport default ArticlePage;\nvar _c;\n$RefreshReg$(_c, \"ArticlePage\");","map":{"version":3,"names":["React","useParams","Product","jsxDEV","_jsxDEV","ArticlePage","match","_s","id","articleContent","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mike/Wac/e-commerce/e-comm-front/src/ArticlePage.js"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Product } from './pages/shop/product'\n\nconst ArticlePage = ({ match }) => {\n  const { id } = useParams(); // Assuming you use the 'id' parameter from the URL to identify the article\n\n  // Fetch the article content based on the 'id' from your data source or API\n  // You can store this in a state or retrieve it on the fly depending on your setup\n\n  // For demonstration purposes, let's assume the article content is stored in a variable called 'articleContent'\n  const articleContent = `Article Content for article with ID: ${id}`;\n\n  return (\n    <div>\n      <h1>{Product.id}{id}</h1>\n      <p>{articleContent}</p>\n    </div>\n  );\n};\n\nexport default ArticlePage;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,OAAO,QAAQ,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE5B;EACA;;EAEA;EACA,MAAMQ,cAAc,GAAI,wCAAuCD,EAAG,EAAC;EAEnE,oBACEJ,OAAA;IAAAM,QAAA,gBACEN,OAAA;MAAAM,QAAA,GAAKR,OAAO,CAACM,EAAE,EAAEA,EAAE;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACzBV,OAAA;MAAAM,QAAA,EAAID;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACP,EAAA,CAfIF,WAAW;EAAA,QACAJ,SAAS;AAAA;AAAAc,EAAA,GADpBV,WAAW;AAiBjB,eAAeA,WAAW;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}