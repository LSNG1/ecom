{"ast":null,"code":"var _jsxFileName = \"/home/mike/Wac/e-commerce/e-comm-front/src/ArticlePage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArticlePage = ({\n  match\n}) => {\n  _s();\n  const {\n    id\n  } = useParams(); // Assuming you use the 'id' parameter from the URL to identify the article\n\n  // Fetch the article content based on the 'id' from your data source or API\n  // For demonstration purposes, let's assume you have an array of products called 'products'\n  // and you can find the product with the matching 'id' in this array\n  const products = [{\n    id: '1',\n    productName: 'Product 1',\n    price: 10,\n    productImage: 'image1.jpg'\n  }, {\n    id: '2',\n    productName: 'Product 2',\n    price: 20,\n    productImage: 'image2.jpg'\n  }\n  // Add more products here\n  ];\n\n  // Find the product with the matching 'id'\n  const product = products.find(product => product.id === id);\n\n  // Check if the product exists\n  if (!product) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Product not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Now you have the product details, including productName, price, and productImage\n  const {\n    productName,\n    price,\n    productImage\n  } = product;\n  const articleContent = `Article Content for article with ID: ${id}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Article \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: productName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: productImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: articleContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ArticlePage, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c = ArticlePage;\nexport default ArticlePage;\nvar _c;\n$RefreshReg$(_c, \"ArticlePage\");","map":{"version":3,"names":["React","useParams","jsxDEV","_jsxDEV","ArticlePage","match","_s","id","products","productName","price","productImage","product","find","children","fileName","_jsxFileName","lineNumber","columnNumber","articleContent","_c","$RefreshReg$"],"sources":["/home/mike/Wac/e-commerce/e-comm-front/src/ArticlePage.js"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst ArticlePage = ({ match }) => {\n  const { id } = useParams(); // Assuming you use the 'id' parameter from the URL to identify the article\n\n  // Fetch the article content based on the 'id' from your data source or API\n  // For demonstration purposes, let's assume you have an array of products called 'products'\n  // and you can find the product with the matching 'id' in this array\n  const products = [\n    {\n      id: '1',\n      productName: 'Product 1',\n      price: 10,\n      productImage: 'image1.jpg',\n    },\n    {\n      id: '2',\n      productName: 'Product 2',\n      price: 20,\n      productImage: 'image2.jpg',\n    },\n    // Add more products here\n  ];\n\n  // Find the product with the matching 'id'\n  const product = products.find((product) => product.id === id);\n\n  // Check if the product exists\n  if (!product) {\n    return <div>Product not found</div>;\n  }\n\n  // Now you have the product details, including productName, price, and productImage\n  const { productName, price, productImage } = product;\n\n  const articleContent = `Article Content for article with ID: ${id}`;\n\n  return (\n    <div>\n      <h1>Article {id}</h1>\n      <p>{productName}</p>\n      <p>{productImage}</p>\n      <p>{price}</p>\n      <p>{articleContent}</p>\n    </div>\n  );\n};\n\nexport default ArticlePage;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE5B;EACA;EACA;EACA,MAAMO,QAAQ,GAAG,CACf;IACED,EAAE,EAAE,GAAG;IACPE,WAAW,EAAE,WAAW;IACxBC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE;EAChB,CAAC,EACD;IACEJ,EAAE,EAAE,GAAG;IACPE,WAAW,EAAE,WAAW;IACxBC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE;EAChB;EACA;EAAA,CACD;;EAED;EACA,MAAMC,OAAO,GAAGJ,QAAQ,CAACK,IAAI,CAAED,OAAO,IAAKA,OAAO,CAACL,EAAE,KAAKA,EAAE,CAAC;;EAE7D;EACA,IAAI,CAACK,OAAO,EAAE;IACZ,oBAAOT,OAAA;MAAAW,QAAA,EAAK;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACrC;;EAEA;EACA,MAAM;IAAET,WAAW;IAAEC,KAAK;IAAEC;EAAa,CAAC,GAAGC,OAAO;EAEpD,MAAMO,cAAc,GAAI,wCAAuCZ,EAAG,EAAC;EAEnE,oBACEJ,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,GAAI,UAAQ,EAACP,EAAE;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrBf,OAAA;MAAAW,QAAA,EAAIL;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBf,OAAA;MAAAW,QAAA,EAAIH;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBf,OAAA;MAAAW,QAAA,EAAIJ;IAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdf,OAAA;MAAAW,QAAA,EAAIK;IAAc;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACZ,EAAA,CA5CIF,WAAW;EAAA,QACAH,SAAS;AAAA;AAAAmB,EAAA,GADpBhB,WAAW;AA8CjB,eAAeA,WAAW;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}